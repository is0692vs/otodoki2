name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # 個別コンテナビルドテスト
  individual-builds:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - uses: actions/checkout@v4

      - name: Build ${{ matrix.service }} container
        run: |
          cd ${{ matrix.service }}
          docker build -t otodoki2-${{ matrix.service }}:test .

  # Docker Compose ビルドとヘルスチェック
  integration-test:
    runs-on: ubuntu-latest
    needs: individual-builds

    steps:
      - uses: actions/checkout@v4

      - name: Debug docker-compose.yml content
        run: |
          echo "--- Content of docker-compose.yml ---"
          cat docker-compose.yml
          echo "-------------------------------------"

      - name: Create .env for docker-compose (use GEMINI_API_KEY if available, else fallback)
        run: |
          # Always set a safe default search strategy for CI (useful for forks where secrets are not available)
          echo "OTODOKI_SEARCH_STRATEGY=random_keyword" > .env

          # If repository secret GEMINI_API_KEY is present, append it (this will be empty for forks)
          if [ -n "${{ secrets.GEMINI_API_KEY }}" ]; then
            echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
            # Optionally enable the default strategy if you prefer Gemini in CI
            echo "OTODOKI_SEARCH_STRATEGY=gemini_keyword" >> .env
          fi

          # (任意) 他の env を必要ならここに追加
          echo "OTODOKI_COUNTRY=JP" >> .env

      - name: Build and start services with docker compose
        run: |
          docker compose up --build -d

      - name: Debug after docker compose up
        run: |
          echo "--- Docker Compose PS output after up ---"
          docker compose ps
          echo "----------------------------------------"

      - name: Wait for services to be ready
        run: |
          timeout 220s bash -c 'until docker compose ps | grep api | grep -q "healthy"; do sleep 5; echo "Waiting..."; done'
          echo "Waiting for API service to be healthy..."
          timeout 220s bash -c 'until docker compose ps api | grep -q "healthy"; do sleep 5; echo "Waiting..."; done'

          echo "Waiting for frontend service to be ready..."
          timeout 220s bash -c 'until curl -f http://localhost:3000 >/dev/null 2>&1; do sleep 5; echo "Waiting for frontend..."; done'

      - name: Test API health endpoint
        run: |
          echo "Testing API health endpoint..."
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)
          if [ $response -eq 200 ]; then
            echo "✓ API health check passed (HTTP $response)"
            echo "Health response:"
            curl -s http://localhost:8000/health | jq .
          else
            echo "✗ API health check failed (HTTP $response)"
            exit 1
          fi

      - name: Test API root endpoint
        run: |
          echo "Testing API root endpoint..."
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/)
          if [ $response -eq 200 ]; then
            echo "✓ API root endpoint test passed (HTTP $response)"
            echo "Root response:"
            curl -s http://localhost:8000/ | jq .
          else
            echo "✗ API root endpoint test failed (HTTP $response)"
            exit 1
          fi

      - name: Test frontend accessibility
        run: |
          echo "Testing frontend accessibility..."
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          if [ $response -eq 200 ]; then
            echo "✓ Frontend accessibility test passed (HTTP $response)"
          else
            echo "✗ Frontend accessibility test failed (HTTP $response)"
            exit 1
          fi

      - name: Test frontend health API
        run: |
          echo "Testing frontend health API..."
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health)
          if [ $response -eq 200 ]; then
            echo "✓ Frontend health API test passed (HTTP $response)"
            echo "Frontend health response:"
            curl -s http://localhost:3000/api/health | jq .
          else
            echo "✗ Frontend health API test failed (HTTP $response)"
            exit 1
          fi

      - name: Test frontend library page
        run: |
          echo "Testing frontend library page..."
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/library)
          if [ $response -eq 200 ]; then
            echo "✓ Frontend library page test passed (HTTP $response)"
          else
            echo "✗ Frontend library page test failed (HTTP $response)"
            exit 1
          fi

      - name: Show service status
        if: always()
        run: |
          echo "=== Docker Compose Services Status ==="
          docker compose ps
          echo ""
          echo "=== API Logs ==="
          docker compose logs api --tail=20
          echo ""
          echo "=== Frontend Logs ==="
          docker compose logs web --tail=20

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f

  # バックエンドのPythonテスト
  backend-test:
    runs-on: ubuntu-latest
    needs: integration-test # integration-testが完了してから実行
    steps:
      - uses: actions/checkout@v4

      - name: Create .env for docker-compose (use GEMINI_API_KEY if available, else fallback)
        run: |
          # Default to a safe search strategy so API won't crash if GEMINI_API_KEY is missing (e.g. forks)
          echo "OTODOKI_SEARCH_STRATEGY=random_keyword" > .env

          # If repository secret GEMINI_API_KEY is present, append it and prefer gemini strategy
          if [ -n "${{ secrets.GEMINI_API_KEY }}" ]; then
            echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
            echo "OTODOKI_SEARCH_STRATEGY=gemini_keyword" >> .env
          fi

          # safe defaults used by the app
          echo "OTODOKI_COUNTRY=JP" >> .env

      - name: Build and start services with docker compose
        run: |
          docker compose up --build -d

      - name: Wait for API service to be healthy
        run: |
          timeout 120s bash -c 'until docker compose ps | grep api | grep -q "healthy"; do sleep 5; echo "Waiting..."; done'

      - name: Run backend Python tests
        run: |
          echo "Running backend Python tests..."
          docker compose exec api env PYTHONPATH=/app pytest

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f

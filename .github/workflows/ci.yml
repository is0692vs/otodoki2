name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 個別コンテナビルドテスト
  individual-builds:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build ${{ matrix.service }} container
      run: |
        cd ${{ matrix.service }}
        docker build -t otodoki2-${{ matrix.service }}:test .

  # Docker Compose ビルドとヘルスチェック
  integration-test:
    runs-on: ubuntu-latest
    needs: individual-builds
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and start services with docker-compose
      run: |
        docker-compose up --build -d
    
    - name: Wait for services to be ready
      run: |
        echo "Waiting for API service to be healthy..."
        timeout 120s bash -c 'until docker-compose ps api | grep -q "healthy"; do sleep 5; echo "Waiting..."; done'
        
        echo "Waiting for frontend service to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:3000 >/dev/null 2>&1; do sleep 5; echo "Waiting for frontend..."; done'
    
    - name: Test API health endpoint
      run: |
        echo "Testing API health endpoint..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)
        if [ $response -eq 200 ]; then
          echo "✓ API health check passed (HTTP $response)"
          echo "Health response:"
          curl -s http://localhost:8000/health | jq .
        else
          echo "✗ API health check failed (HTTP $response)"
          exit 1
        fi
    
    - name: Test API root endpoint
      run: |
        echo "Testing API root endpoint..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/)
        if [ $response -eq 200 ]; then
          echo "✓ API root endpoint test passed (HTTP $response)"
          echo "Root response:"
          curl -s http://localhost:8000/ | jq .
        else
          echo "✗ API root endpoint test failed (HTTP $response)"
          exit 1
        fi
    
    - name: Test frontend accessibility
      run: |
        echo "Testing frontend accessibility..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
        if [ $response -eq 200 ]; then
          echo "✓ Frontend accessibility test passed (HTTP $response)"
        else
          echo "✗ Frontend accessibility test failed (HTTP $response)"
          exit 1
        fi
    
    - name: Test frontend health API
      run: |
        echo "Testing frontend health API..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health)
        if [ $response -eq 200 ]; then
          echo "✓ Frontend health API test passed (HTTP $response)"
          echo "Frontend health response:"
          curl -s http://localhost:3000/api/health | jq .
        else
          echo "✗ Frontend health API test failed (HTTP $response)"
          exit 1
        fi
    
    - name: Test frontend library page
      run: |
        echo "Testing frontend library page..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/library)
        if [ $response -eq 200 ]; then
          echo "✓ Frontend library page test passed (HTTP $response)"
        else
          echo "✗ Frontend library page test failed (HTTP $response)"
          exit 1
        fi
    
    - name: Show service status
      if: always()
      run: |
        echo "=== Docker Compose Services Status ==="
        docker-compose ps
        echo ""
        echo "=== API Logs ==="
        docker-compose logs api --tail=20
        echo ""
        echo "=== Frontend Logs ==="
        docker-compose logs web --tail=20
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f